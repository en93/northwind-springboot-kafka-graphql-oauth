openapi: 3.0.1
info:
  title: Northwind Modulith API
  description: Northwind Modulith API
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    description: Local Server

tags:
  - name: Product
    description: Performs CRUD operations for products
  - name: Order
    description: Performs CRUD operations for orders
  - name: Supplier
    description: Performs CRUD operations for suppliers
  - name: Customer
    description: Performs CRUD operations for customers

paths:
  /products:
    get:
      summary: Returns a list of products
      description: Returns a list of products
      operationId: getProducts
      tags:
        - Product
      parameters:
        - name: productKey
          in: query
          description: Key for the product
          required: false
          schema:
            type: string
        - name: searchOrderName
          in: query
          description: Filter products by their titles or partial match
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        #        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortDirection'


        # - name: supplierId
        #   in: query
        #   description: Filter products by supplier id
        #   required: false
        #   schema:
        #     type: integer
        #     format: int32
        # - name: categoryId
        #   in: query
        #   description: Filter products by category id
        #   required: false
        #   schema:
        #     type: integer
        #     format: int32
        # - name: minPrice
        #   in: query
        #   description: Filter products by minimum price
        #   required: false
        #   schema:
        #     type: number
        #     format: float
        # - name: maxPrice
        #   in: query
        #   description: Filter products by maximum price
        #   required: false
        #   schema:
        #     type: number
        #     format: float
        # - name: page
        #   in: query
        #   description: Pagination
        #   required: false
        #   schema:
        #     type: integer
        #     format: int32
        # - name: limit #todo externalise this part
        #   in: query
        #   description: Page
        #   required: false
        #   schema:
        #     type: integer
        #     format: int32
        #     default: 12
        # - name: sort
        #   in: query
        #   description: Sort by this field
        #   required: false
        #   schema:
        #     type: string
        #     enum: [name, price, supplier, category]
        #     default: name
        # - name: direction
        #   in: query
        #   description: Sorting direction
        #   required: false
        #   schema:
        #     type: string
        #     enum: [asc, desc]
        #     default: asc
      responses:
        '200':
          description: List of matching product results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/PaginationData'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    # post:
    #   summary: Add a product to the database
    #   description: Add a product to the database
    #   operationId: addProduct
    #   tags:
    #     - Product
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Product'
    #       application/xml:
    #         schema:
    #           $ref: '#/components/schemas/Product'
    #   responses:
    #     '201':
    #       description: Product added
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Product' #todo change to surigate key
    #         application/xml:
    #           schema:
    #             $ref: '#/components/schemas/Product'

  /orders:
    get:
      summary: Returns a list of orders
      description: Returns a list of orders
      operationId: getOrders
      tags:
        - Order
      parameters:
        - name: orderKey
          in: query
          description: Key for the order
          required: false
          schema:
            type: string
        - name: customerKey
          in: query
          description: Filter orders by order
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        #        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortDirection'
      responses:
        '200':
          description: List of matching order results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/PaginationData'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /suppliers:
    get:
      summary: Returns a list of suppliers
      description: Returns a list of suppliers
      operationId: getSuppliers
      tags:
        - Supplier
      parameters:
        - name: supplierKey
          in: query
          description: Key for the supplier
          required: false
          schema:
            type: string
        - name: searchSupplierName
          in: query
          description: Search for a supplier by name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        #        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortDirection'
      responses:
        '200':
          description: List of matching supplier results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Supplier'
                  pagination:
                    $ref: '#/components/schemas/PaginationData'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Supplier'


  /customer:
    get:
      summary: Returns a list of customers
      description: Returns a list of customers
      operationId: getCustomers
      tags:
        - Customer
      parameters:
        - name: customerKey
          in: query
          description: Key for the customer
          required: false
          schema:
            type: string
        - name: searchCustomerName
          in: query
          description: Search for a customer by name
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        #        - $ref: '#/components/parameters/SortBy'
        - $ref: '#/components/parameters/SortDirection'
      responses:
        '200':
          description: List of matching customer results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  pagination:
                    $ref: '#/components/schemas/PaginationData'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'



  # /categories:
  #   get:
  #     summary: Returns a list of categories
  #     description: Returns a list of categories
  #     operationId: getCategories
  #     tags:
  #       - Category
  #     parameters:
  #       - name: categoryId
  #         in: query
  #         description: Filter products by categoryId
  #         required: false
  #         schema:
  #           type: string
  #       - name: categoryName
  #         in: query
  #         description: Filter products by categoryName
  #         required: false
  #         schema:
  #           type: string

  #       - name: limit #todo externalise this part
  #         in: query
  #         description: Page
  #         required: false
  #         schema:
  #           type: integer
  #           format: int32
  #           default: 12
  #       - name: sort
  #         in: query
  #         description: Sort by this field
  #         required: false
  #         schema:
  #           type: string
  #           enum: [name, price, supplier, category]
  #           default: name
  #       - name: direction
  #         in: query
  #         description: Sorting direction
  #         required: false
  #         schema:
  #           type: string
  #           enum: [asc, desc]
  #           default: asc
  #     responses:
  #       '200':
  #         description:
  #           List of matching category results
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Category'
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Category'



components:
  parameters:
    Limit:
      name: limit
      in: query
      description: Maximum items per page
      required: false
      schema:
        type: integer
        default: 10
        example: 10
        minimum: 1
        maximum: 100
    Offset:
      name: offset
      in: query
      description: Count of results to skip
      required: false
      schema:
        type: integer
        example: 0
        default: 0
        minimum: 0
    #    SortBy:
    #      name: sortBy
    #      in: query
    #      description: Field to sort by (e.g., name, createdAt).
    #      required: false
    #      schema:
    #        type: string
    #        enum: [ name, email, createdAt ]
    #        default: name
    SortDirection:
      name: sortDirection
      in: query
      description: Direction of results
      required: false
      schema:
        type: string
        enum: [ asc, desc ]
        default: asc
        example: 'asc'

  schemas:
    Product:
      type: object
      properties:
        productKey:
          type: string
          example: 'PRD-001'
        name:
          type: string
          example: 'Blink Notepad'
#        description:
#          type: string
#          example: 'Large notepad'
        supplier:
          $ref: '#/components/schemas/Supplier'
        category:
          $ref: '#/components/schemas/Category'
        unit:
          type: string
          example: 'Pack of 10'
        price:
          type: number
          format: float
          example: '10'

    Order:
      type: object
      properties:
        orderKey:
          type: string
          example: 'ORD-001'
        orderDate:
          type: string
          format: date-time
        shipper:
          $ref: '#/components/schemas/Shipper'
        orderDetails:
          type: array
          items:
            $ref: '#/components/schemas/OrderDetail'

    Shipper:
      type: object
      properties:
        shipperId:
          type: string
          example: 'SHPR-001'
        shipperName:
          type: string
          example: 'Logistics North'
        shipperPhone:
          type: string
          example: '09123456'

        #TODO create new module and schema for this
        # Shipment:
        #   type: object
        #   properties:
        #     shipmentKey:
        #       type: string
        #       example: 'SHP-001'


    OrderDetail:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer

    Supplier:
      type: object
      properties:
        supplierKey:
          type: string
          example: 'SPLR-001'
        supplierName:
          type: string
          example: 'Sporting Supplier store'
        addressDetails:
          $ref: '#/components/schemas/AddressDetails'
        supplierPhone:
          type: string
          example: '0912345678'

    Customer:
      type: object
      properties:
        customerKey:
          type: string
          example: 'CUST-001'
        customerName:
          type: string
          example: 'My mowing business'
        addressDetails:
          $ref: '#/components/schemas/AddressDetails'

    AddressDetails:
      type: object
      properties:
        address:
          type: string
          example: '1 Queen Street'
        city:
          type: string
          example: 'Auckland'
        postalCode:
          type: string
          example: '1060'
        country:
          type: string
          example: 'New Zealand'

    Category:
      type: object
      properties:
        categoryId:
          type: integer
          format: int32
        categoryName:
          type: string
        description:
          type: string

    PaginationData:
      type: object
      properties:
        total:
          type: integer
          description: Count of all matching results in dataset
          example: '190'
        limit:
          type: integer
          description: Maximum items per page
          example: '10'
        offset:
          type: integer
          example: '0'
          description: Count of results to skip
        pageCount:
          type: integer
          example: '5'
          description: Total number of pages available.
