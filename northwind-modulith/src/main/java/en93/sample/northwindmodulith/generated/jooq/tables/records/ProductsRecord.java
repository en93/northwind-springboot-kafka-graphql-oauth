/*
 * This file is generated by jOOQ.
 */
package en93.sample.northwindmodulith.generated.jooq.tables.records;


import en93.sample.northwindmodulith.generated.jooq.tables.ProductsTable;
import en93.sample.northwindmodulith.generated.jooq.tables.pojos.ProductsEntity;

import java.math.BigDecimal;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductsRecord extends UpdatableRecordImpl<ProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.products.productid</code>.
     */
    public ProductsRecord setProductid(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.products.productid</code>.
     */
    public Integer getProductid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.products.productname</code>.
     */
    public ProductsRecord setProductname(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.products.productname</code>.
     */
    public String getProductname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.products.supplierid</code>.
     */
    public ProductsRecord setSupplierid(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.products.supplierid</code>.
     */
    public Integer getSupplierid() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.products.categoryid</code>.
     */
    public ProductsRecord setCategoryid(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.products.categoryid</code>.
     */
    public Integer getCategoryid() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.products.unit</code>.
     */
    public ProductsRecord setUnit(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.products.unit</code>.
     */
    public String getUnit() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.products.price</code>.
     */
    public ProductsRecord setPrice(BigDecimal value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.products.price</code>.
     */
    public BigDecimal getPrice() {
        return (BigDecimal) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProductsRecord
     */
    public ProductsRecord() {
        super(ProductsTable.PRODUCTS);
    }

    /**
     * Create a detached, initialised ProductsRecord
     */
    public ProductsRecord(Integer productid, String productname, Integer supplierid, Integer categoryid, String unit, BigDecimal price) {
        super(ProductsTable.PRODUCTS);

        setProductid(productid);
        setProductname(productname);
        setSupplierid(supplierid);
        setCategoryid(categoryid);
        setUnit(unit);
        setPrice(price);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ProductsRecord
     */
    public ProductsRecord(ProductsEntity value) {
        super(ProductsTable.PRODUCTS);

        if (value != null) {
            setProductid(value.getProductid());
            setProductname(value.getProductname());
            setSupplierid(value.getSupplierid());
            setCategoryid(value.getCategoryid());
            setUnit(value.getUnit());
            setPrice(value.getPrice());
            resetChangedOnNotNull();
        }
    }
}
