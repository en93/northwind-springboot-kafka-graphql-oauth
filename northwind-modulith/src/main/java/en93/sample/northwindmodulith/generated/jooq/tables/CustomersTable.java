/*
 * This file is generated by jOOQ.
 */
package en93.sample.northwindmodulith.generated.jooq.tables;


import en93.sample.northwindmodulith.generated.jooq.Keys;
import en93.sample.northwindmodulith.generated.jooq.Public;
import en93.sample.northwindmodulith.generated.jooq.tables.OrdersTable.OrdersPath;
import en93.sample.northwindmodulith.generated.jooq.tables.records.CustomersRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CustomersTable extends TableImpl<CustomersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.customers</code>
     */
    public static final CustomersTable CUSTOMERS = new CustomersTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomersRecord> getRecordType() {
        return CustomersRecord.class;
    }

    /**
     * The column <code>public.customers.customerid</code>.
     */
    public final TableField<CustomersRecord, Integer> CUSTOMERID = createField(DSL.name("customerid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.customers.customername</code>.
     */
    public final TableField<CustomersRecord, String> CUSTOMERNAME = createField(DSL.name("customername"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customers.contactname</code>.
     */
    public final TableField<CustomersRecord, String> CONTACTNAME = createField(DSL.name("contactname"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customers.address</code>.
     */
    public final TableField<CustomersRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.customers.city</code>.
     */
    public final TableField<CustomersRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.customers.postalcode</code>.
     */
    public final TableField<CustomersRecord, String> POSTALCODE = createField(DSL.name("postalcode"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.customers.country</code>.
     */
    public final TableField<CustomersRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(15), this, "");

    private CustomersTable(Name alias, Table<CustomersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CustomersTable(Name alias, Table<CustomersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.customers</code> table reference
     */
    public CustomersTable(String alias) {
        this(DSL.name(alias), CUSTOMERS);
    }

    /**
     * Create an aliased <code>public.customers</code> table reference
     */
    public CustomersTable(Name alias) {
        this(alias, CUSTOMERS);
    }

    /**
     * Create a <code>public.customers</code> table reference
     */
    public CustomersTable() {
        this(DSL.name("customers"), null);
    }

    public <O extends Record> CustomersTable(Table<O> path, ForeignKey<O, CustomersRecord> childPath, InverseForeignKey<O, CustomersRecord> parentPath) {
        super(path, childPath, parentPath, CUSTOMERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CustomersPath extends CustomersTable implements Path<CustomersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CustomersPath(Table<O> path, ForeignKey<O, CustomersRecord> childPath, InverseForeignKey<O, CustomersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CustomersPath(Name alias, Table<CustomersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CustomersPath as(String alias) {
            return new CustomersPath(DSL.name(alias), this);
        }

        @Override
        public CustomersPath as(Name alias) {
            return new CustomersPath(alias, this);
        }

        @Override
        public CustomersPath as(Table<?> alias) {
            return new CustomersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CustomersRecord, Integer> getIdentity() {
        return (Identity<CustomersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CustomersRecord> getPrimaryKey() {
        return Keys.CUSTOMERS_PKEY;
    }

    private transient OrdersPath _orders;

    /**
     * Get the implicit to-many join path to the <code>public.orders</code>
     * table
     */
    public OrdersPath orders() {
        if (_orders == null)
            _orders = new OrdersPath(this, null, Keys.ORDERS__ORDERS_CUSTOMERID_FKEY.getInverseKey());

        return _orders;
    }

    @Override
    public CustomersTable as(String alias) {
        return new CustomersTable(DSL.name(alias), this);
    }

    @Override
    public CustomersTable as(Name alias) {
        return new CustomersTable(alias, this);
    }

    @Override
    public CustomersTable as(Table<?> alias) {
        return new CustomersTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomersTable rename(String name) {
        return new CustomersTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomersTable rename(Name name) {
        return new CustomersTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomersTable rename(Table<?> name) {
        return new CustomersTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomersTable where(Condition condition) {
        return new CustomersTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomersTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomersTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomersTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CustomersTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CustomersTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CustomersTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CustomersTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomersTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomersTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
