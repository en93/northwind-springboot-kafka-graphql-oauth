/*
 * This file is generated by jOOQ.
 */
package en93.sample.northwindmodulith.generated.jooq.tables;


import en93.sample.northwindmodulith.generated.jooq.Keys;
import en93.sample.northwindmodulith.generated.jooq.Public;
import en93.sample.northwindmodulith.generated.jooq.tables.OrdersTable.OrdersPath;
import en93.sample.northwindmodulith.generated.jooq.tables.ProductsTable.ProductsPath;
import en93.sample.northwindmodulith.generated.jooq.tables.records.OrderdetailsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrderdetailsTable extends TableImpl<OrderdetailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.orderdetails</code>
     */
    public static final OrderdetailsTable ORDERDETAILS = new OrderdetailsTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderdetailsRecord> getRecordType() {
        return OrderdetailsRecord.class;
    }

    /**
     * The column <code>public.orderdetails.orderdetailid</code>.
     */
    public final TableField<OrderdetailsRecord, Integer> ORDERDETAILID = createField(DSL.name("orderdetailid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.orderdetails.orderid</code>.
     */
    public final TableField<OrderdetailsRecord, Integer> ORDERID = createField(DSL.name("orderid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.orderdetails.productid</code>.
     */
    public final TableField<OrderdetailsRecord, Integer> PRODUCTID = createField(DSL.name("productid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.orderdetails.quantity</code>.
     */
    public final TableField<OrderdetailsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER, this, "");

    private OrderdetailsTable(Name alias, Table<OrderdetailsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrderdetailsTable(Name alias, Table<OrderdetailsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.orderdetails</code> table reference
     */
    public OrderdetailsTable(String alias) {
        this(DSL.name(alias), ORDERDETAILS);
    }

    /**
     * Create an aliased <code>public.orderdetails</code> table reference
     */
    public OrderdetailsTable(Name alias) {
        this(alias, ORDERDETAILS);
    }

    /**
     * Create a <code>public.orderdetails</code> table reference
     */
    public OrderdetailsTable() {
        this(DSL.name("orderdetails"), null);
    }

    public <O extends Record> OrderdetailsTable(Table<O> path, ForeignKey<O, OrderdetailsRecord> childPath, InverseForeignKey<O, OrderdetailsRecord> parentPath) {
        super(path, childPath, parentPath, ORDERDETAILS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrderdetailsPath extends OrderdetailsTable implements Path<OrderdetailsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrderdetailsPath(Table<O> path, ForeignKey<O, OrderdetailsRecord> childPath, InverseForeignKey<O, OrderdetailsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrderdetailsPath(Name alias, Table<OrderdetailsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrderdetailsPath as(String alias) {
            return new OrderdetailsPath(DSL.name(alias), this);
        }

        @Override
        public OrderdetailsPath as(Name alias) {
            return new OrderdetailsPath(alias, this);
        }

        @Override
        public OrderdetailsPath as(Table<?> alias) {
            return new OrderdetailsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrderdetailsRecord, Integer> getIdentity() {
        return (Identity<OrderdetailsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrderdetailsRecord> getPrimaryKey() {
        return Keys.ORDERDETAILS_PKEY;
    }

    @Override
    public List<ForeignKey<OrderdetailsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDERDETAILS__ORDERDETAILS_ORDERID_FKEY, Keys.ORDERDETAILS__ORDERDETAILS_PRODUCTID_FKEY);
    }

    private transient OrdersPath _orders;

    /**
     * Get the implicit join path to the <code>public.orders</code> table.
     */
    public OrdersPath orders() {
        if (_orders == null)
            _orders = new OrdersPath(this, Keys.ORDERDETAILS__ORDERDETAILS_ORDERID_FKEY, null);

        return _orders;
    }

    private transient ProductsPath _products;

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    public ProductsPath products() {
        if (_products == null)
            _products = new ProductsPath(this, Keys.ORDERDETAILS__ORDERDETAILS_PRODUCTID_FKEY, null);

        return _products;
    }

    @Override
    public OrderdetailsTable as(String alias) {
        return new OrderdetailsTable(DSL.name(alias), this);
    }

    @Override
    public OrderdetailsTable as(Name alias) {
        return new OrderdetailsTable(alias, this);
    }

    @Override
    public OrderdetailsTable as(Table<?> alias) {
        return new OrderdetailsTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderdetailsTable rename(String name) {
        return new OrderdetailsTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderdetailsTable rename(Name name) {
        return new OrderdetailsTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderdetailsTable rename(Table<?> name) {
        return new OrderdetailsTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderdetailsTable where(Condition condition) {
        return new OrderdetailsTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderdetailsTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderdetailsTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderdetailsTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderdetailsTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderdetailsTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderdetailsTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderdetailsTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderdetailsTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderdetailsTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
